#!/bin/bash

# ========================================
# Supabase Database Script Runner
# ========================================
# This script executes SQL files against your Supabase database
# Usage: ./bin/run-db-script <script-file> [options]
# Example: ./bin/run-db-script database/01-profiles-table.sql

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
ENV_FILE="$PROJECT_ROOT/.env"

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show usage
show_usage() {
    echo "Usage: $0 <script-file> [options]"
    echo ""
    echo "Options:"
    echo "  -h, --help        Show this help message"
    echo "  -v, --verbose     Verbose output"
    echo "  --dry-run         Show what would be executed without running"
    echo "  --confirm         Require confirmation before executing"
    echo ""
    echo "Examples:"
    echo "  $0 database/01-profiles-table.sql"
    echo "  $0 database/test-profiles-rls.sql --verbose"
    echo "  $0 database/02-foods-table.sql --confirm"
    echo ""
    echo "Environment Variables (from .env):"
    echo "  DATABASE_URL      PostgreSQL connection string"
    echo "  SUPABASE_URL      Supabase project URL (alternative)"
    echo "  SUPABASE_SERVICE_KEY  Service role key (for admin operations)"
}

# Function to load environment variables
load_env() {
    if [[ -f "$ENV_FILE" ]]; then
        print_status "Loading environment from $ENV_FILE"
        source "$ENV_FILE"
    else
        print_warning ".env file not found at $ENV_FILE"
        print_warning "Make sure to set DATABASE_URL environment variable"
    fi
}

# Function to check prerequisites
check_prerequisites() {
    if ! command -v psql &> /dev/null; then
        print_error "psql command not found. Please install PostgreSQL client."
        echo "macOS: brew install postgresql"
        echo "Ubuntu: sudo apt-get install postgresql-client"
        exit 1
    fi

    if [[ -z "$DATABASE_URL" ]]; then
        print_error "DATABASE_URL environment variable is not set"
        print_error "Please set it in your .env file or export it directly"
        print_error "Format: postgresql://postgres:[PASSWORD]@db.[PROJECT-REF].supabase.co:5432/postgres"
        exit 1
    fi
}

# Function to validate script file
validate_script() {
    local script_file="$1"

    if [[ ! -f "$script_file" ]]; then
        print_error "Script file not found: $script_file"
        exit 1
    fi

    if [[ ! "$script_file" =~ \.sql$ ]]; then
        print_warning "File does not have .sql extension: $script_file"
    fi
}

# Function to execute SQL script
execute_script() {
    local script_file="$1"
    local verbose="$2"
    local dry_run="$3"

    print_status "Executing SQL script: $script_file"

    if [[ "$dry_run" == "true" ]]; then
        print_warning "DRY RUN MODE - Would execute:"
        echo "psql \"$DATABASE_URL\" -f \"$script_file\""
        return 0
    fi

    local psql_args=()
    psql_args+=("-f" "$script_file")

    if [[ "$verbose" == "true" ]]; then
        psql_args+=("-a")  # Echo all input
        psql_args+=("-e")  # Echo commands
    else
        psql_args+=("-q")  # Quiet mode
    fi

    # Execute the script
    if psql "$DATABASE_URL" "${psql_args[@]}"; then
        print_success "Script executed successfully: $script_file"
    else
        print_error "Script execution failed: $script_file"
        exit 1
    fi
}

# Function to confirm execution
confirm_execution() {
    local script_file="$1"

    echo ""
    print_warning "You are about to execute: $script_file"
    print_warning "Against database: ${DATABASE_URL%@*}@[HIDDEN]"
    echo ""
    read -p "Are you sure you want to continue? (y/N): " -n 1 -r
    echo ""

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_status "Execution cancelled by user"
        exit 0
    fi
}

# Main function
main() {
    local script_file=""
    local verbose="false"
    local dry_run="false"
    local confirm="false"

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_usage
                exit 0
                ;;
            -v|--verbose)
                verbose="true"
                shift
                ;;
            --dry-run)
                dry_run="true"
                shift
                ;;
            --confirm)
                confirm="true"
                shift
                ;;
            -*)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
            *)
                if [[ -z "$script_file" ]]; then
                    script_file="$1"
                else
                    print_error "Multiple script files specified"
                    show_usage
                    exit 1
                fi
                shift
                ;;
        esac
    done

    # Check if script file was provided
    if [[ -z "$script_file" ]]; then
        print_error "No script file specified"
        show_usage
        exit 1
    fi

    # Convert relative path to absolute if needed
    if [[ ! "$script_file" =~ ^/ ]]; then
        script_file="$PROJECT_ROOT/$script_file"
    fi

    print_status "NutritionTrackerV2 Database Script Runner"
    print_status "Project Root: $PROJECT_ROOT"

    # Load environment and check prerequisites
    load_env
    check_prerequisites
    validate_script "$script_file"

    # Confirm execution if requested
    if [[ "$confirm" == "true" ]]; then
        confirm_execution "$script_file"
    fi

    # Execute the script
    execute_script "$script_file" "$verbose" "$dry_run"

    print_success "Database script execution completed"
}

# Run main function with all arguments
main "$@"